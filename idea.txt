Premise

⸻

✅ DEVELOPMENT FLOW OVERVIEW
	1.	Design Phase
	•	Define features (e.g., workouts, exercises, sets, progress tracking, user profiles).
	•	Draft DB schema and API endpoints.
	•	Decide on core entities (User, Workout, Exercise, etc.).
	2.	Backend First
	•	Yes, start with backend: define models, database, and API.
	•	Build endpoints and test them with Swagger (FastAPI provides it).
	•	Add authentication if needed (e.g., OAuth2 with JWT).
	3.	Frontend Second
	•	Once your backend is stable, scaffold the Vue + Quasar frontend.
	•	Connect frontend to API using axios or fetch.

⸻

📁 PROJECT STRUCTURE

gym-tracker/
│
├── backend/
│   ├── app/
│   │   ├── api/             # Routers per feature
│   │   ├── core/            # Config, settings
│   │   ├── db/              # Models, session, schemas
│   │   ├── crud/            # SQLAlchemy logic
│   │   ├── schemas/         # Pydantic models
│   │   └── main.py          # FastAPI app
│   └── Pipfile              # Pipenv env
│
└── frontend/
    └── gym-ui/              # Vue.js + Quasar project


⸻

🛠 BACKEND SETUP STEPS

You’re already using pipenv, so just ensure:
	1.	Install dependencies:

pipenv install fastapi uvicorn sqlalchemy psycopg2-binary alembic pydantic

	•	Use psycopg2-binary for PostgreSQL or aiosqlite for SQLite.
	•	Add python-dotenv or pydantic-settings for config.

	2.	Key Components to Implement:
	•	Base and session via declarative_base and sessionmaker.
	•	Models using SQLAlchemy ORM classes.
	•	CRUD logic with DB sessions.
	•	Pydantic schemas for I/O validation.
	•	Routers using FastAPI’s APIRouter.
	3.	Optional:
	•	Auth: use fastapi.security, implement JWT token generation and verification.
	•	Migrations: integrate alembic.

⸻

🛠 FRONTEND SETUP: Vue.js + Quasar
	1.	Install Node and Quasar CLI:
Make sure Node.js (>=18.x) is installed (via Homebrew):

brew install node
npm install -g @quasar/cli


	2.	Create Quasar project:

quasar create gym-ui
cd gym-ui
quasar dev

During setup:
	•	Choose Vue 3 + Composition API.
	•	Add support for TypeScript if desired.

	3.	Install Axios for HTTP requests:

npm install axios


	4.	Quasar Pages/Components:
	•	Create pages for workouts, history, login/register, dashboard, etc.
	•	Use Vuex or Pinia (recommended) for state management (user, workouts).
	5.	Communicate with FastAPI:
	•	Use axios to call backend endpoints.
	•	Handle tokens in headers for authenticated routes.

⸻

🔁 DEVELOPMENT FLOW
	1.	Backend:
	•	Define models: User, Workout, Exercise, Set.
	•	Implement DB schema and endpoints.
	•	Test APIs using Swagger UI at /docs.
	2.	Frontend:
	•	Set up layout and views.
	•	Connect to backend.
	•	Test with mock data or real endpoints.
	3.	Finalize:
	•	Add validation, error handling.
	•	Secure endpoints (CORS, auth).
	•	Deploy (FastAPI: Docker/Uvicorn/Gunicorn; Quasar: Static build + Nginx or Vite SSR).

⸻

Models

⸻

🧱 Core Entities & Relationships

1. User
	•	Fields: id, username, email, hashed_password, created_at
	•	Relationships:
	•	Has many trainings

2. Exercise
	•	Fields: id, name, description, muscle_group
	•	Relationships:
	•	Can be used in many training_exercises

3. Training
	•	A workout session created by a user on a specific day
	•	Fields: id, user_id, date, notes
	•	Relationships:
	•	Belongs to a user
	•	Has many training_exercises

4. TrainingExercise (association table)
	•	Each row = one exercise used in one training (e.g. “Squat in Training #5”)
	•	Fields: id, training_id, exercise_id, order, sets, reps, weight
	•	Relationships:
	•	Belongs to a training
	•	Refers to one exercise

⸻

🔗 Suggested Relationships (Visual)

User (1) ────────┐
                 │
           (many) Trainings (1) ───────┐
                                       │
                                (many) TrainingExercises (many) ───── Exercise


⸻

🔧 SQLAlchemy Hints

In SQLAlchemy, you will:
	•	Use relationship() in User to link to Training.
	•	Define ForeignKey fields for user_id, training_id, exercise_id.
	•	Use a separate model for TrainingExercise as it’s not a pure many-to-many (it holds extra data like sets, weight, etc.).
	•	Use declarative_base() to define your ORM models.

⸻

📝 Pydantic Schema Suggestions

For each model, create:
	•	Base schema with shared fields.
	•	Create schema (for POST).
	•	Read schema (for responses, including nested relationships optionally).

Example:
	•	UserBase, UserCreate, UserRead
	•	TrainingBase, TrainingCreate, TrainingRead with nested TrainingExerciseRead
